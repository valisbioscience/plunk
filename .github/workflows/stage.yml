name: Plunk Stage

on:
  pull_request:
    branches: [stage]
    types: [closed]

env:
  AWS_REGION: eu-central-1
  AWS_ROLE: arn:aws:iam::952221707682:role/vb_deployment
  ECS_TASK_DEFINITION: ./.aws/stage-task-definition.json
  ECR_REPOSITORY: plunk

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy Backend
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    if: github.event.pull_request.merged == true

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: AWS credentials Configure
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE }}
          role-duration-seconds: 900
          aws-region: ${{ env.AWS_REGION }}

      - name: Amazon ECR Login
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Amazon ECR Build, tag, and push plunk image
        id: build-image-plunk
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Amazon ECS task definition udapte for backend
        id: task-def-plunk
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: plunk
          image: ${{ steps.build-image-plunk.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-plunk.outputs.task-definition }}
          service: plunk
          cluster: plunk
